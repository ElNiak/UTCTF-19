#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <string.h>
#include <sys/ptrace.h>

__attribute__((constructor))
static void _csu_init() {
    if (ptrace(PTRACE_TRACEME, 0, 1, 0) == -1) {
        exit(1);
    }
}

double divide(int a, int b)
{
   if( b == 0 )
   {
       throw 8;
   }
   return (a/b);
}


//unsigned char stuff []= {85, 72, 137, 229, 72, 137, 125, 232, 72, 137, 117, 224, 199, 69, 252, 0, 0, 0, 0, 233, 161, 0, 0, 0, 139, 69, 252, 131, 192, 65, 137, 69, 240, 199, 69, 244, 32, 0, 0, 0, 199, 69, 248, 5, 0, 0, 0, 139, 69, 244, 137, 194, 193, 234, 31, 1, 208, 209, 248, 137, 194, 139, 69, 248, 141, 12, 2, 186, 147, 36, 73, 146, 137, 200, 247, 234, 141, 4, 10, 193, 248, 2, 137, 194, 137, 200, 193, 248, 31, 41, 194, 137, 208, 137, 194, 193, 226, 3, 41, 194, 137, 200, 41, 208, 131, 248, 2, 117, 14, 139, 69, 240, 139, 69, 240, 131, 232, 4, 137, 69, 240, 235, 18, 139, 69, 240, 131, 232, 65, 137, 69, 240, 139, 69, 240, 131, 192, 51, 137, 69, 240, 139, 69, 240, 139, 85, 252, 72, 99, 202, 72, 139, 85, 232, 72, 1, 202, 15, 182, 10, 137, 198, 139, 69, 252, 72, 99, 208, 72, 139, 69, 232, 72, 1, 208, 49, 241, 137, 202, 136, 16, 131, 69, 252, 1, 139, 69, 252, 72, 152, 72, 57, 69, 224, 15, 135, 80, 255, 255, 255, 144, 93, 195};

unsigned char stuff[] = {19, 37, 89, 237, 67, 54, 141, 144, 198, 27, 208, 107, 134, 44, 17, 195, 211, 217, 92, 181, 36, 2, 164, 146, 58, 251, 102, 69, 29, 115, 165, 116, 232, 130, 234, 204, 138, 57, 37, 209, 231, 5, 81, 42, 53, 162, 183, 103, 107, 136, 161, 153, 35, 165, 36, 242, 97, 79, 235, 6, 189, 133, 102, 129, 91, 197, 121, 217, 228, 57, 28, 132, 140, 40, 198, 183, 110, 113, 153, 197, 93, 182, 80, 197, 134, 61, 57, 237, 122, 221, 23, 196, 7, 30, 104, 150, 102, 55, 224, 26, 48, 122, 99, 82, 159, 143, 113, 5, 115, 57, 76, 140, 5, 20, 88, 204, 127, 97, 219, 162, 43, 219, 147, 153, 6, 182, 235, 199, 179, 99, 43, 24, 80, 10, 78, 170, 89, 210, 146, 129, 231, 122, 233, 122, 169, 190, 121, 228, 69, 156, 231, 83, 75, 137, 38, 156, 248, 91, 167, 158, 93, 228, 245, 173, 152, 222, 174, 65, 151, 221, 48, 210, 23, 253, 129, 251, 10, 209, 192, 74, 232, 62, 95, 115, 60, 161, 192, 252, 253, 127, 156, 131, 155, 251, 3, 255, 145, 51, 231, 75, 49, 61, 201};

unsigned char stuff2[] = {11, 97, 160, 181, 25, 205, 192, 121, 13, 26, 223, 187, 211, 230, 180, 7, 250, 43, 58, 142, 27, 190, 247, 193, 117, 89, 248, 203, 80, 253, 94, 57, 106, 87, 222, 144, 206, 149, 107, 233, 127, 37, 213, 151, 16, 85, 61, 154, 109, 96, 31, 217, 174, 81, 39, 171, 132, 232, 35, 137, 173, 242, 22, 197, 24, 226, 152, 42, 189, 76, 196, 231, 111, 235, 243, 46, 105, 69, 64, 19, 128, 49, 218, 228, 83, 100, 150, 72, 167, 86, 143, 123, 14, 179, 124, 113, 114, 118, 29, 129, 75, 177, 166, 219, 246, 53, 135, 84, 165, 148, 214, 74, 212, 245, 102, 20, 249, 244, 12, 6, 198, 183, 164, 5, 146, 116, 224, 92, 50, 239, 2, 17, 82, 28, 112, 98, 122, 200, 215, 120, 32, 15, 126, 140, 18, 159, 176, 240, 60, 78, 227, 90, 41, 115, 47, 237, 182, 161, 52, 44, 168, 65, 33, 208, 36, 56, 169, 63, 172, 70, 23, 54, 45, 51, 220, 199, 153, 191, 178, 145, 163, 1, 130, 93, 91, 216, 210, 194, 236, 110, 66, 138, 186, 147, 141, 103, 241, 188, 10, 9, 209, 108, 71};

unsigned char test[] = {37, 76, 122, 112, 102, 44, 65, 44, 114, 125, 42, 107, 117, 6, 18, 84, 84, 13, 61, 21, 8, 14, 26, 50, 27, 90, 6, 5, 55, 27, 19, 20, 16, 44, 6, 65, 47, 11, 22, 78, 35, 26, 8, 11, 75, 52, 50, 94, 116, 37, 29, 34, 51, 63, 62, 126, 62, 56, 62, 32, 43, 60, 96, 0};

int main(int argc, char **argv) {
    setbuf(stdin, 0);
    setbuf(stdout, 0);
    printf("Please enter the correct password.\n>");
    char buff[64];
    fgets(buff, 64, stdin);
    size_t len = strlen(buff);

    if(len > 63) {
        printf("Wrong password\n");
        return 0;
    }

    volatile int index = 45;
    try {
        volatile int val = 34;
        volatile int fuck = 32;
        val >> 1;
        val += 34;
        int fuckup =divide((fuck) ,(fuck - fuck));
        buff[fuckup] ^= 8;
        buff[index] = val;
        buff[index + 2] = val;
        buff[index + 3] = val;
    } catch(int b) {
        volatile int actual_val = 67;
        buff[index + 7] ^= actual_val;
        buff[index + 2] ^= (actual_val + 1);
    }
    for(int i = 0; i < len; ++i) {
        volatile int a = 32;
        volatile int b = 64;
        volatile int c = 71;
        buff[i] ^= (c - b) + a;
    }

    for(int i = 0; i < 203; ++i) {
        stuff[i] = (stuff[i] - 1) ^ stuff2[202 - i];
    }

    void (*ret)(char *buff, size_t len) = (void(*)(char *buff, size_t len))stuff;
    ret(buff, len);
    if(!memcmp(test, buff, 64)) {
        printf("Correct Password!");
        /**
        FILE *fl = fopen("flag.txt", "r");
        if(fl == NULL) {
            printf("Connect to the server to get your flag.\n");
            return 0;
        }
        char flag[100];
        fgets(flag, 100, fl);
        printf("%s", flag);
        */
    } else {
        printf("Incorrect password.\n");
        printf("utflag{wrong_password_btw_this_is_not_the_flag_and_if_you_submit_this_i_will_judge_you}\n");
    }
    return 0;    
}
